Part 1: Vehicle Inventory Management (1 hour)
Define Classes and Relationships (OOPs):

Create a base class Vehicle with attributes:

vehicleId (String, unique ID for the vehicle)
brand (String)
model (String)
price (double)
manufactureDate (LocalDate)
Create two subclasses:

Car (additional attribute: seatingCapacity - int)
Bike (additional attribute: engineCapacity - int in cc)
Implement the following:

Constructor for all classes to initialize attributes.
toString() method to display vehicle details.
Encapsulation for all fields.
Array for Inventory:

Create an array of 5 vehicles (3 cars and 2 bikes). Populate the array with sample data.
Stream API and Searching:

Write a method to print all vehicles from a specific brand using the Stream API.
Part 2: Customer and Sales Management (1 hour)
Customer Class:

Create a class Customer with attributes:

customerId (String, unique ID for each customer)
name (String)
email (String)
purchasedVehicles (List of Vehicle objects)
Implement:

Constructor to initialize attributes.
Method addPurchasedVehicle(Vehicle vehicle) to add a purchased vehicle to the list.
toString() method to display customer details including their purchased vehicles.
Mapping Customer to Vehicles:

Use a Map<Customer, Set<Vehicle>> to map customers to the vehicles they purchased.
Exception Handling:

Create a custom exception VehicleNotAvailableException that is thrown when trying to purchase a vehicle not in inventory.
Feature Implementation:

Write a method to:
Add a vehicle to a customer's purchase list and remove it from inventory.
Throw the custom exception if the vehicle is not found.
Part 3: Additional Features (1 hour)
Cloneable for Discounts:

Implement Cloneable in the Vehicle class to create a discounted copy of a vehicle with 10% off the price.
Serialization:

Serialize and save the Map<Customer, Set<Vehicle>> to a file named salesData.ser.
Write code to deserialize the file and print the data.
Stream API - Advanced Filtering:

Print all vehicles purchased by customers, sorted by their price in descending order.
LocalDateTime:

Add a purchaseDateTime attribute to the Customer class for every purchase.
Print the purchase date and time for each vehicle a customer has bought.
Deliverables:
The Java code for all the above features.
A sample main() method that demonstrates:
Creating vehicle inventory.
Adding customers and their purchases.
Handling exceptions for unavailable vehicles.
Serializing and deserializing sales data.
Evaluation Criteria:
Proper implementation of OOPs concepts (classes, inheritance, encapsulation).
Correct use of arrays, collections (List, Set, Map), and Stream API.
Handling exceptions appropriately.
Correct implementation of serialization and cloning.
Code readability and maintainability.
Good luck! üöóüèç


